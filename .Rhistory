Data <- MAGMA.R::MAGMA_sim_data
install.packages("mlr")
task <- mlr::makeClassifTask(data = Data, target = "gifted_support")
lrn  mlr::makeLearner("regr")
lrn <-  mlr::makeLearner("regr")
rdesc <- mlr::makeResampleDesc ( method = " CV " , iters =5)
rdesc <- mlr::makeResampleDesc (method = "CV" , iters =5)
ps <- mlr::makeParamSet(
mlr::makeDiscreteParam("kernel", values = c ("polydot" , "rbfdot")),
mlr::makeNumericParam( "C" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ) ,
mlr::makeNumericParam( "sigma" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ,
requires = quote ( kernel == "rbfdot" ) ) ,
mlr::makeIntegerParam ( "degree" , lower = 1 , upper = 5 ,
requires = quote ( kernel == "polydot" ) ) )
ps <- ParamHelpers::makeParamSet(
mlr::makeDiscreteParam("kernel", values = c ("polydot" , "rbfdot")),
mlr::makeNumericParam( "C" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ) ,
mlr::makeNumericParam( "sigma" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ,
requires = quote ( kernel == "rbfdot" ) ) ,
mlr::makeIntegerParam ( "degree" , lower = 1 , upper = 5 ,
requires = quote ( kernel == "polydot" ) ) )
ps <- ParamHelpers::makeParamSet(
ParamHelpers::makeDiscreteParam("kernel", values = c ("polydot" , "rbfdot")),
ParamHelpers::makeNumericParam( "C" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ) ,
ParamHelpers::makeNumericParam( "sigma" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ,
requires = quote ( kernel == "rbfdot" ) ) ,
ParamHelpers::makeIntegerParam ( "degree" , lower = 1 , upper = 5 ,
requires = quote ( kernel == "polydot" ) ) )
ctrl <- mlr::makeTuneControlRandom(maxit =50)
res <- mlr::tuneParams(lrn , task , rdesc , par . set = ps , control = ctrl , measures = mmce )
res <- mlr::tuneParams(lrn , task , rdesc , par.set = ps , control = ctrl , measures = mmce )
lrn <-  mlr::makeLearner("regr")
lrn <-  mlr::makeLearner("regr.lm")
rdesc <- mlr::makeResampleDesc (method = "CV" , iters =5)
ps <- ParamHelpers::makeParamSet(
ParamHelpers::makeDiscreteParam("kernel", values = c ("polydot" , "rbfdot")),
ParamHelpers::makeNumericParam( "C" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ) ,
ParamHelpers::makeNumericParam( "sigma" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ,
requires = quote ( kernel == "rbfdot" ) ) ,
ParamHelpers::makeIntegerParam ( "degree" , lower = 1 , upper = 5 ,
requires = quote ( kernel == "polydot" ) ) )
ctrl <- mlr::makeTuneControlRandom(maxit =50)
res <- mlr::tuneParams(lrn , task , rdesc , par.set = ps , control = ctrl , measures = mmce )
res <- mlr::tuneParams(lrn , task , rdesc , par.set = ps , control = ctrl , measures = "mse" )
res <- mlr::tuneParams(lrn , task , rdesc , par.set = ps , control = ctrl , measures = list("mse"))
res <- mlr::tuneParams(lrn , task , rdesc , par.set = ps , control = ctrl , measures = mse )
res <- mlr::tuneParams(lrn , task , rdesc , par.set = ps , control = ctrl )
lrn <-  mlr::makeLearner(" classif.ksvm")
rdesc <- mlr::makeResampleDesc (method = "CV" , iters =5)
ps <- ParamHelpers::makeParamSet(
ParamHelpers::makeDiscreteParam("kernel", values = c ("polydot" , "rbfdot")),
ParamHelpers::makeNumericParam( "C" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ) ,
ParamHelpers::makeNumericParam( "sigma" , lower = -15 , upper =15 , trafo = function ( x ) 2^ x ,
requires = quote ( kernel == "rbfdot" ) ) ,
ParamHelpers::makeIntegerParam ( "degree" , lower = 1 , upper = 5 ,
requires = quote ( kernel == "polydot" ) ) )
ctrl <- mlr::makeTuneControlRandom(maxit =50)
res <- mlr::tuneParams(lrn , task , rdesc , par.set = ps , control = ctrl )
ps <- ParamHelpers::makeParamSet(
ParamHelpers::makeDiscreteParam("kernel", values = c ("polydot" , "rbfdot")),
ParamHelpers::makeNumericParam( "C" , lower = -15 , upper =15 , trafo = function ( x ) 2^x ) ,
ParamHelpers::makeNumericParam( "sigma" , lower = -15 , upper =15 , trafo = function ( x ) 2^x ,
requires = quote ( kernel == "rbfdot" ) ) ,
ParamHelpers::makeIntegerParam ( "degree" , lower = 1 , upper = 5 ,
requires = quote ( kernel == "polydot" ) ) )
ctrl <- mlr::makeTuneControlRandom(maxit =50)
res <- mlr::tuneParams(lrn , task , rdesc , par.set = ps , control = ctrl )
library(mlr)
set.seed(123)
# a grid search for an SVM (with a tiny number of points...)
# note how easily we can optimize on a log-scale
ps = makeParamSet(
makeNumericParam("C", lower = -12, upper = 12, trafo = function(x) 2^x),
makeNumericParam("sigma", lower = -12, upper = 12, trafo = function(x) 2^x)
)
ctrl = makeTuneControlGrid(resolution = 2L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams("classif.ksvm", iris.task, rdesc, par.set = ps, control = ctrl)
print(res)
# access data for all evaluated points
df = as.data.frame(res$opt.path)
df1 = as.data.frame(res$opt.path, trafo = TRUE)
print(head(df[, -ncol(df)]))
print(head(df1[, -ncol(df)]))
# access data for all evaluated points - alternative
df2 = generateHyperParsEffectData(res)
df3 = generateHyperParsEffectData(res, trafo = TRUE)
print(head(df2$data[, -ncol(df2$data)]))
print(head(df3$data[, -ncol(df3$data)]))
